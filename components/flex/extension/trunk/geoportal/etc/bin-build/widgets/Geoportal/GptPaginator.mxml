<?xml version="1.0" encoding="utf-8"?>
<!--
See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
Esri Inc. licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!--
Component that adds pagination to the search results
-->
<mx:HBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
           xmlns:s="library://ns.adobe.com/flex/spark" 
           xmlns:mx="library://ns.adobe.com/flex/mx"
           creationComplete="creationCompleteHandler(event)">
<fx:Script>
    <![CDATA[
      import com.esri.gpt.finddata.GptRSSEvent;
      import com.esri.gpt.utils.Utils;
      import com.esri.viewer.ViewerContainer;
      
      import mx.collections.ArrayList;
      import mx.containers.HBox;
      import mx.events.FlexEvent;
      
      // event declaration =====================================================
      [Event(name="GptPagination", type="com.esri.gpt.finddata.flexviewer.widgets.GptRSSEvent")]
      
      
      // instance variables ====================================================
      public var totalResults:int = int.MIN_VALUE;
      
      public var startIndex:int = int.MIN_VALUE;
      
      public var itemsPerPage:int = int.MIN_VALUE;
      
      public var maxPages:int = int.MIN_VALUE;
      
      
      [Bindable]
      private var lblPrevious:String = "";
      
      [Bindable]
      private var lblNext:String = "";
      
      private var pagesToShow:ArrayList = new ArrayList();
      
      
      
      // methods ===============================================================
      
      /**
       * Creation complete handler
       * 
       * @param event The event object for creation complete
       * */
      protected function creationCompleteHandler(event:FlexEvent):void
      {
        searchDoneHandler(null);
        ViewerContainer.addEventListener(GptRSSEvent.GPT_SEARCH_DONE, 
          searchDoneHandler, false, 0, true);
        
       
        
      }
      
      /**
      * Set Configuration xml 
      * 
      * @param configXml Configuration xml object
      * */
      public function set configXml(configXml:XML):void {
        lblPrevious = Utils.chkString(
          configXml.label.(@name=="lblPrevious").@value);
        lblNext = Utils.chkString(
          configXml.label.(@name=="lblNext").@value);
      }
      
      /**
      * Handler for search done 
      * 
      * @param event The search done handler event
      * */
      public function searchDoneHandler(event:Event):void {
        cpPrevious.enabled = startIndex > 1 ;
        var totalPages:Number = Math.ceil(totalResults/itemsPerPage);
        var currentPage:Number = Math.ceil(startIndex/itemsPerPage);
        cpNext.enabled = currentPage < totalPages;
      }
      
      /**
      * Previous button handler
      * 
      * @param event The mouse even when the button is clicked
      * */
      protected function cpPrevious_clickHandler(event:MouseEvent):void
      {
         event.stopPropagation();
         dispatchEvent(new GptRSSEvent(GptRSSEvent.GPT_RECORD_INDEX, 
           { recordIndex: this.startIndex - this.itemsPerPage },
           true, true));
      }


      /**
      * Next button handler
      * 
      * @param event The mouse event when the button is clicked
      * */
      protected function cpNext_clickHandler(event:MouseEvent):void
      {
        event.stopPropagation();
        dispatchEvent(new GptRSSEvent(GptRSSEvent.GPT_RECORD_INDEX, 
          { recordIndex: this.startIndex + this.itemsPerPage },
              true, true));
      }
    ]]>
  </fx:Script>

  
    <s:Button id="cpPrevious" click="cpPrevious_clickHandler(event)"
               label="{lblPrevious}"/>
    
    <s:Button id="cpNext" click="cpNext_clickHandler(event)"
               label="{lblNext}"/>

</mx:HBox>
