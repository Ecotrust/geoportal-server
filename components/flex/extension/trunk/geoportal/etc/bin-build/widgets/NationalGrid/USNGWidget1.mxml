<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 - 2009 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->

<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				   layout="horizontal"
				   widgetConfigLoaded="init()">
	    
	<fx:Script>
		
		<![CDATA[
			import com.esri.agsx.geom.GeometryUtils;
			import com.esri.ags.geod.proj.Mercator;
			import com.esri.ags.geod.ReferencedCS;
			import com.esri.ags.grat.PatternLineSymbol;
			import com.esri.ags.Graphic;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.geod.GeographicCS;
			import com.esri.ags.geod.geom.MoreUtils;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geod.view.MgrsLayer;
			import com.esri.ags.geod.proj.GeographicProjection;
			import com.esri.ags.grat.SimpleGraticuleLayer;
			import com.esri.ags.geod.CoordinateTransformation;
			import com.esri.ags.geod.ProjectedCS;
			import com.esri.ags.geod.Utilities;
		
			import mx.controls.Alert;
	 		[Bindable]
			private var mgrsLayer:MgrsLayer;
	 		[Bindable]
			private var graticuleLayer:SimpleGraticuleLayer;
	 		[Bindable]
	 		private var mapLon:String = "";
	 		[Bindable]
	 		private var mapLat:String = "";

			[Bindable]
			private var mapNorth:String = "";
			[Bindable]
			private var mapEast:String = "";
			
			[Bindable]
	 		private var mgrs:String = "";
	 		
	 		private var usngGraphics:GraphicsLayer;
	 		
			private var m_geogToProg:CoordinateTransformation;
			
			
			private function mouseMoveHandler(event:MouseEvent):void
			{
				if (mgrsLayerCB.selected){
					const mapPoint:MapPoint = map.toMapFromStage(event.stageX, event.stageY);
					mapNorth = mapPoint.y.toFixed(0);
					mapEast = mapPoint.x.toFixed(0);
					
					var pt:Point = new Point(mapPoint.x, mapPoint.y);
					m_geogToProg.projectInverse(pt);
					mgrs = MoreUtils.getMGRSString(pt.y, pt.x);
					mapLon = Utilities.radiansToDMSString(pt.x*Math.PI/180);
					mapLat = Utilities.radiansToDMSString(pt.y*Math.PI/180);
				}
			}
						
			private function init():void
			{
				
				
				m_geogToProg = new CoordinateTransformation();
				m_geogToProg.init(ProjectedCS.WebMercator.geographicCS, ProjectedCS.WebMercator)
				
				mgrsLayer = new MgrsLayer();
				mgrsLayer.geographicCS = GeographicCS.NAD83;
				mgrsLayer.map = map;
				mgrsLayer.cs = ReferencedCS.WebMercator;
				mgrsLayer.id="USNG grid"
				map.addLayer(mgrsLayer);
				map.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				graticuleLayer = new  SimpleGraticuleLayer();
				map.addLayer(graticuleLayer);
				graticuleLayer.projection = Mercator.WebMercator;
				graticuleLayer.map = map;
				graticuleLayer.id="Lat/Lon grid";
				usngGraphics = new GraphicsLayer();
				usngGraphics.id = "USNG graphics";
				map.addLayer(usngGraphics);
				usngGraphics.symbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0xff0000,1,3);
				if (configXML)
				{
					var color:uint;
					var alpha:Number;
					var width:int;


					//graticule
					color = parse_uint(graticuleLayer.lineSymbol.color, configXML.graticule.line.color);
					alpha = parse_number(graticuleLayer.lineSymbol.alpha, configXML.graticule.line.alpha);
					width = parse_int(graticuleLayer.lineSymbol.width, configXML.graticule.line.width); 
					var dashArray:Array = parse_intArray([12,3,2,3], configXML.graticule.line.dashArray);
					graticuleLayer.lineSymbol = new PatternLineSymbol(dashArray, color, alpha, width);
					graticuleLayer.fontColor = parse_uint(graticuleLayer.fontColor, configXML.graticule.text.color);
					graticuleLayer.fontBackgroundColor = parse_uint(graticuleLayer.fontBackgroundColor, configXML.graticule.text.backgroundColor);
					graticuleLayer.fontBorderColor = parse_uint(graticuleLayer.fontBorderColor, configXML.graticule.text.borderColor);
					graticuleLayer.fontSize = parse_int(graticuleLayer.fontSize, configXML.graticule.text.size);
					graticuleLayer.textTransparency = parse_number(graticuleLayer.textTransparency, configXML.graticule.text.alpha);
					graticuleLayer.fontBorder = parse_boolean(graticuleLayer.fontBorder, configXML.graticule.text.border);
					graticuleLayer.fontBackground = parse_boolean(graticuleLayer.fontBorder, configXML.graticule.text.background);
					graticuleLayer.m_numberOfGrids = parse_int(graticuleLayer.m_numberOfGrids, configXML.graticule.numberOfGrids);
					graticuleLayer.useDMM = parse_boolean(graticuleLayer.useDMM, configXML.graticule.useDMM);


					//utm					
					mgrsLayer.maxUTMScale=parse_number(mgrsLayer.maxUTMScale, configXML.mgrsLayer.utm.maxscale);
					mgrsLayer.minUTMScale=parse_number(mgrsLayer.minUTMScale, configXML.mgrsLayer.utm.minscale);
					color = parse_uint(mgrsLayer.utmLineSymbol.color, configXML.mgrsLayer.utm.line.color);
					alpha = parse_number(mgrsLayer.utmLineSymbol.alpha, configXML.mgrsLayer.utm.line.alpha);
					width = parse_int(mgrsLayer.utmLineSymbol.width, configXML.mgrsLayer.utm.line.width); 
					mgrsLayer.utmLineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, color, alpha, width);
					mgrsLayer.utmTextFormat.color = parse_uint(uint(mgrsLayer.utmTextFormat.color), configXML.mgrsLayer.utm.text.color);
					mgrsLayer.utmTextFormat.size = parse_int(Number(mgrsLayer.utmTextFormat.size), configXML.mgrsLayer.utm.text.size);
					mgrsLayer.utmTextFormat.italic = parse_boolean(mgrsLayer.utmTextFormat.italic, configXML.mgrsLayer.utm.text.italic);
					mgrsLayer.utmTextFormat.font = parse_string(mgrsLayer.utmTextFormat.font, configXML.mgrsLayer.utm.text.font);
					

					// mgrs
					mgrsLayer.maxMGRSScale = parse_number(mgrsLayer.maxMGRSScale, configXML.mgrsLayer.mgrs.maxscale);
					mgrsLayer.minMGRSScale = parse_number(mgrsLayer.minMGRSScale, configXML.mgrsLayer.mgrs.minscale);
					mgrsLayer.mgrsLineAlpha = parse_number(mgrsLayer.mgrsLineAlpha, configXML.mgrsLayer.mgrs.line.alpha);
					mgrsLayer.mgrsLineColor = parse_uint(mgrsLayer.mgrsLineColor, configXML.mgrsLayer.mgrs.line.color);
					mgrsLayer.mgrsLineWidth = parse_int(mgrsLayer.mgrsLineWidth, configXML.mgrsLayer.mgrs.line.width);
					mgrsLayer.mgrsTextFormat.color = parse_uint(uint(mgrsLayer.mgrsTextFormat.color), configXML.mgrsLayer.mgrs.text.color);
					mgrsLayer.mgrsTextFormat.size = parse_int(Number(mgrsLayer.mgrsTextFormat.size), configXML.mgrsLayer.mgrs.text.size);
					mgrsLayer.mgrsTextFormat.italic = parse_boolean(mgrsLayer.mgrsTextFormat.italic, configXML.mgrsLayer.mgrs.text.italic);
					mgrsLayer.mgrsTextFormat.font = parse_string(mgrsLayer.mgrsTextFormat.font, configXML.mgrsLayer.mgrs.text.font);

					// mgrs fine grid
					mgrsLayer.maxGridScale = parse_number(mgrsLayer.maxGridScale, configXML.mgrsLayer.mgrsFineGrid.maxscale);
					mgrsLayer.minGridScale = parse_number(mgrsLayer.minGridScale, configXML.mgrsLayer.mgrsFineGrid.minscale);
					mgrsLayer.gridLineAlpha = parse_number(mgrsLayer.gridLineAlpha, configXML.mgrsLayer.mgrsFineGrid.line.alpha);
					mgrsLayer.gridLineColor = parse_uint(mgrsLayer.gridLineColor, configXML.mgrsLayer.mgrsFineGrid.line.color);
					mgrsLayer.gridLineWidth = parse_int(mgrsLayer.gridLineWidth, configXML.mgrsLayer.mgrsFineGrid.line.width);
					mgrsLayer.mgrsGridFormat.color = parse_uint(uint(mgrsLayer.mgrsGridFormat.color), configXML.mgrsLayer.mgrsFineGrid.text.color);
					mgrsLayer.mgrsGridFormat.size = parse_int(Number(mgrsLayer.mgrsGridFormat.size), configXML.mgrsLayer.mgrsFineGrid.text.size);
					mgrsLayer.mgrsGridFormat.italic = parse_boolean(mgrsLayer.mgrsGridFormat.italic, configXML.mgrsLayer.mgrsFineGrid.text.italic);
					mgrsLayer.mgrsGridFormat.font = parse_string(mgrsLayer.mgrsGridFormat.font, configXML.mgrsLayer.mgrsFineGrid.text.font);


				}
			}
			
			private function parse_boolean(b:Boolean, s:String):Boolean
			{
				if (!s)
					return b;
			    if (s == "true")
			    	return true;
			    return false;		
			}
			private function parse_number(n:Number, s:String):Number
			{
				if (!s)
					return n;
				return Number(s);
			}
			private function parse_uint(i:uint, s:String):uint
			{
				if (!s)
					return i;
				return uint(Number(s));
			}
			private function parse_int(i:int, s:String):int
			{
				if (!s)
					return i;
				return int(Number(s));
			}
			private function parse_string(s1:String, s2:String):String
			{
				if (!s2)
					return s1;
				return s2;
			}

			private function parse_intArray(a:Array, s:String):Array
			{
				if (!s)
					return a;
					
				var sArray:Array = s.split(",");
				var answer:Array = new Array(sArray.length);
				for (var i:int=0;i<sArray.length;i++){
					answer[i] = Number(sArray[i]);
				}
				return answer;
			}

			private function removeSpaces(str:String):String
			{
				var myPattern:RegExp = / /g;  
				return str.replace(myPattern, "");  
			}
			private function goTo(event:MouseEvent):void
			{
				goTo2();
			}

			
			private function goTo2():void
			{
				var myPattern:RegExp = / /g;  
				var str:String = usngGoTo.text.replace(myPattern, "");  
				var pline:Polyline = MoreUtils.MGRS_To_Polyline(str, mgrsLayer.geographicCS,map);
				if (pline){
					var geogToProg:CoordinateTransformation = new CoordinateTransformation();
					geogToProg.init(ProjectedCS.WebMercator.geographicCS, ProjectedCS.WebMercator)
					pline = geogToProg.projectPolyline(pline, false);//false is for forward, true would be inverse	
					if (pline){
						usngGraphics.clear();
						usngGraphics.add(new Graphic(pline));
						var ext:Extent = GeometryUtils.calculatePolylineExtent(pline);
						map.extent = ext.expand(20);
					}
				}
				
			}
			private function changeMGRSLayer():void
			{
				mgrsLayer.visible = !mgrsLayer.visible;
			}
			private function changeGraticuleLayer():void
			{
				graticuleLayer.visible = !graticuleLayer.visible;
			}
			
		]]>
	</fx:Script>
		
	<viewer:WidgetTemplate width="420" height="300">
		<s:VGroup width="100%" paddingTop="15">
			<s:HGroup>
				<mx:CheckBox id="graticuleLayerCB" label="Show Lat/Lon Grid" change="changeGraticuleLayer()" selected="{graticuleLayer.visible}"/>
				<mx:CheckBox id="mgrsLayerCB" label="Show National Grid" change="changeMGRSLayer()" selected="{mgrsLayer.visible}"/>
			</s:HGroup>
			<s:HGroup paddingBottom="15" paddingTop="10">
				<s:VGroup>
			    	<s:Label color="0xffffff" id="latLabel" text="Latitude: {mapLat}" visible="true"/> 
			    	<s:Label color="0xffffff" id="lonLabel" text="Longitude: {mapLon}" visible = "true"/>
				</s:VGroup>
				<s:VGroup>
					<s:Label color="0xffffff" id="yLabel" text="Northing: {mapNorth}" visible="true"/> 
					<s:Label color="0xffffff" id="xLabel" text="Easting: {mapEast}" visible = "true"/>
				</s:VGroup>
			</s:HGroup>
			<s:Label color="0xffffff" id="mgrsLabel" text="USNG: {mgrs}" visible="true"/>
			
	
	    	
			<s:HGroup paddingTop="15">
		    	<s:Button label="Go To (USNG)" click="goTo(event)"/>
				<s:TextInput height="24" width="200" id="usngGoTo" click="if (usngGoTo.text=='Enter USNG Coordinates') usngGoTo.text=''"
					 text="Enter USNG Coordinates" enter="goTo2()"/>
			</s:HGroup>
			<s:Label color="0xffffff" text="Try 18SUJ23480647 for the Washington Monument."/>
	    	
		</s:VGroup>
	</viewer:WidgetTemplate>
	
</viewer:BaseWidget>
